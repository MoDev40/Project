//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApartmentManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbApartmentManagementEntities : DbContext
    {
        public dbApartmentManagementEntities()
            : base("name=dbApartmentManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Apartment> Apartments { get; set; }
        public virtual DbSet<Floor> Floors { get; set; }
        public virtual DbSet<LeasingAgreement> LeasingAgreements { get; set; }
        public virtual DbSet<MaintenanceAssignment> MaintenanceAssignments { get; set; }
        public virtual DbSet<MaintenanceRequest> MaintenanceRequests { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<string> CreateApartment(string apartmentName, string location, string ownerContact, string ownerEmail)
        {
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var ownerContactParameter = ownerContact != null ?
                new ObjectParameter("OwnerContact", ownerContact) :
                new ObjectParameter("OwnerContact", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateApartment", apartmentNameParameter, locationParameter, ownerContactParameter, ownerEmailParameter);
        }
    
        public virtual ObjectResult<string> createFloor(Nullable<int> floorNum, string rooms, Nullable<decimal> price, Nullable<int> apartmentID)
        {
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var roomsParameter = rooms != null ?
                new ObjectParameter("Rooms", rooms) :
                new ObjectParameter("Rooms", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var apartmentIDParameter = apartmentID.HasValue ?
                new ObjectParameter("ApartmentID", apartmentID) :
                new ObjectParameter("ApartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("createFloor", floorNumParameter, roomsParameter, priceParameter, apartmentIDParameter);
        }
    
        public virtual ObjectResult<string> CreateLeasingAgreement(Nullable<int> apartmentId, Nullable<int> tenantID, Nullable<int> floorID, Nullable<System.DateTime> moveInDate, Nullable<System.DateTime> leaseStartDate, Nullable<System.DateTime> leaseEndDate)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            var moveInDateParameter = moveInDate.HasValue ?
                new ObjectParameter("MoveInDate", moveInDate) :
                new ObjectParameter("MoveInDate", typeof(System.DateTime));
    
            var leaseStartDateParameter = leaseStartDate.HasValue ?
                new ObjectParameter("LeaseStartDate", leaseStartDate) :
                new ObjectParameter("LeaseStartDate", typeof(System.DateTime));
    
            var leaseEndDateParameter = leaseEndDate.HasValue ?
                new ObjectParameter("LeaseEndDate", leaseEndDate) :
                new ObjectParameter("LeaseEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateLeasingAgreement", apartmentIdParameter, tenantIDParameter, floorIDParameter, moveInDateParameter, leaseStartDateParameter, leaseEndDateParameter);
        }
    
        public virtual ObjectResult<string> CreateMaintenanceAssign(Nullable<int> requestID, Nullable<int> assignedStaff, Nullable<System.DateTime> assingDate)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var assignedStaffParameter = assignedStaff.HasValue ?
                new ObjectParameter("AssignedStaff", assignedStaff) :
                new ObjectParameter("AssignedStaff", typeof(int));
    
            var assingDateParameter = assingDate.HasValue ?
                new ObjectParameter("AssingDate", assingDate) :
                new ObjectParameter("AssingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateMaintenanceAssign", requestIDParameter, assignedStaffParameter, assingDateParameter);
        }
    
        public virtual ObjectResult<string> CreateMaintenanceReq(Nullable<int> apartmentID, Nullable<int> floorNum, Nullable<System.DateTime> reqDate, string reqDesc, Nullable<int> tenantID)
        {
            var apartmentIDParameter = apartmentID.HasValue ?
                new ObjectParameter("ApartmentID", apartmentID) :
                new ObjectParameter("ApartmentID", typeof(int));
    
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var reqDateParameter = reqDate.HasValue ?
                new ObjectParameter("ReqDate", reqDate) :
                new ObjectParameter("ReqDate", typeof(System.DateTime));
    
            var reqDescParameter = reqDesc != null ?
                new ObjectParameter("ReqDesc", reqDesc) :
                new ObjectParameter("ReqDesc", typeof(string));
    
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateMaintenanceReq", apartmentIDParameter, floorNumParameter, reqDateParameter, reqDescParameter, tenantIDParameter);
        }
    
        public virtual ObjectResult<string> CreatePayment(Nullable<int> leaseID, Nullable<int> maintenanceID, Nullable<decimal> paymentAmount, Nullable<System.DateTime> paymentDate, string paymentDesc)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("maintenanceID", maintenanceID) :
                new ObjectParameter("maintenanceID", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentDescParameter = paymentDesc != null ?
                new ObjectParameter("PaymentDesc", paymentDesc) :
                new ObjectParameter("PaymentDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreatePayment", leaseIDParameter, maintenanceIDParameter, paymentAmountParameter, paymentDateParameter, paymentDescParameter);
        }
    
        public virtual ObjectResult<string> CreateStaff(string firstName, string lastName, string email, string contactNumber, Nullable<int> positionID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateStaff", firstNameParameter, lastNameParameter, emailParameter, contactNumberParameter, positionIDParameter);
        }
    
        public virtual ObjectResult<string> CreateTenant(string firstName, string lastName, string contactNumber, string email, string password)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateTenant", firstNameParameter, lastNameParameter, contactNumberParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> CreateUser(string userName, string passwordHash, Nullable<int> roleID, Nullable<int> staffID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateUser", userNameParameter, passwordHashParameter, roleIDParameter, staffIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteApartment(Nullable<int> apartmentId)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteApartment", apartmentIdParameter);
        }
    
        public virtual ObjectResult<string> deleteFloor(Nullable<int> floorID)
        {
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("deleteFloor", floorIDParameter);
        }
    
        public virtual ObjectResult<string> deleteLeasing(Nullable<int> leaseID, Nullable<int> apartmentId, Nullable<int> floorID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("leaseID", leaseID) :
                new ObjectParameter("leaseID", typeof(int));
    
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("deleteLeasing", leaseIDParameter, apartmentIdParameter, floorIDParameter);
        }
    
        public virtual int DeleteMaintenanceAssign(Nullable<int> assigntID)
        {
            var assigntIDParameter = assigntID.HasValue ?
                new ObjectParameter("AssigntID", assigntID) :
                new ObjectParameter("AssigntID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMaintenanceAssign", assigntIDParameter);
        }
    
        public virtual int DeleteMaintenanceReq(Nullable<int> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMaintenanceReq", requestIDParameter);
        }
    
        public virtual ObjectResult<string> DeletePayment(Nullable<int> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletePayment", paymentIDParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", roleIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteStaff(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteStaff", staffIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteTenant(Nullable<int> tenantID)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteTenant", tenantIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteUser", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getLeaseID(Nullable<int> apartID, Nullable<int> floorID)
        {
            var apartIDParameter = apartID.HasValue ?
                new ObjectParameter("ApartID", apartID) :
                new ObjectParameter("ApartID", typeof(int));
    
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getLeaseID", apartIDParameter, floorIDParameter);
        }
    
        public virtual ObjectResult<string> getPosition(Nullable<int> positionID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getPosition", positionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getPositionID(string position)
        {
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getPositionID", positionParameter);
        }
    
        public virtual ObjectResult<Login_Result> Login(string username, Nullable<int> userID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Result>("Login", usernameParameter, userIDParameter);
        }
    
        public virtual int ReadApartment(Nullable<int> apartmentId)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReadApartment", apartmentIdParameter);
        }
    
        public virtual ObjectResult<ReadRole_Result> ReadRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadRole_Result>("ReadRole", roleIDParameter);
        }
    
        public virtual int ReadStaff(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReadStaff", staffIDParameter);
        }
    
        public virtual ObjectResult<ReadTenant_Result> ReadTenant(Nullable<int> tenantID)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadTenant_Result>("ReadTenant", tenantIDParameter);
        }
    
        public virtual ObjectResult<ReadUser_Result> ReadUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadUser_Result>("ReadUser", userIDParameter);
        }
    
        public virtual ObjectResult<string> spCreateRole(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spCreateRole", roleNameParameter);
        }
    
        public virtual ObjectResult<string> UpdateApartment(Nullable<int> apartmentId, string apartmentName, string location, string ownerContact, string ownerEmail)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            var apartmentNameParameter = apartmentName != null ?
                new ObjectParameter("ApartmentName", apartmentName) :
                new ObjectParameter("ApartmentName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var ownerContactParameter = ownerContact != null ?
                new ObjectParameter("OwnerContact", ownerContact) :
                new ObjectParameter("OwnerContact", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateApartment", apartmentIdParameter, apartmentNameParameter, locationParameter, ownerContactParameter, ownerEmailParameter);
        }
    
        public virtual ObjectResult<string> updateFloor(Nullable<int> floorID, Nullable<int> floorNum, string rooms, Nullable<decimal> price, Nullable<int> apartmentID, string status)
        {
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var roomsParameter = rooms != null ?
                new ObjectParameter("Rooms", rooms) :
                new ObjectParameter("Rooms", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var apartmentIDParameter = apartmentID.HasValue ?
                new ObjectParameter("ApartmentID", apartmentID) :
                new ObjectParameter("ApartmentID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("updateFloor", floorIDParameter, floorNumParameter, roomsParameter, priceParameter, apartmentIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> UpdateLeasingAgreement(Nullable<int> leasingAgreementId, Nullable<int> apartmentId, Nullable<int> tenantID, Nullable<int> floorID, Nullable<System.DateTime> moveInDate, Nullable<System.DateTime> leaseStartDate, Nullable<System.DateTime> leaseEndDate, string agreementStatus, Nullable<int> incorectFloorID, Nullable<int> incorrectApartID)
        {
            var leasingAgreementIdParameter = leasingAgreementId.HasValue ?
                new ObjectParameter("LeasingAgreementId", leasingAgreementId) :
                new ObjectParameter("LeasingAgreementId", typeof(int));
    
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            var floorIDParameter = floorID.HasValue ?
                new ObjectParameter("FloorID", floorID) :
                new ObjectParameter("FloorID", typeof(int));
    
            var moveInDateParameter = moveInDate.HasValue ?
                new ObjectParameter("MoveInDate", moveInDate) :
                new ObjectParameter("MoveInDate", typeof(System.DateTime));
    
            var leaseStartDateParameter = leaseStartDate.HasValue ?
                new ObjectParameter("LeaseStartDate", leaseStartDate) :
                new ObjectParameter("LeaseStartDate", typeof(System.DateTime));
    
            var leaseEndDateParameter = leaseEndDate.HasValue ?
                new ObjectParameter("LeaseEndDate", leaseEndDate) :
                new ObjectParameter("LeaseEndDate", typeof(System.DateTime));
    
            var agreementStatusParameter = agreementStatus != null ?
                new ObjectParameter("AgreementStatus", agreementStatus) :
                new ObjectParameter("AgreementStatus", typeof(string));
    
            var incorectFloorIDParameter = incorectFloorID.HasValue ?
                new ObjectParameter("IncorectFloorID", incorectFloorID) :
                new ObjectParameter("IncorectFloorID", typeof(int));
    
            var incorrectApartIDParameter = incorrectApartID.HasValue ?
                new ObjectParameter("IncorrectApartID", incorrectApartID) :
                new ObjectParameter("IncorrectApartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateLeasingAgreement", leasingAgreementIdParameter, apartmentIdParameter, tenantIDParameter, floorIDParameter, moveInDateParameter, leaseStartDateParameter, leaseEndDateParameter, agreementStatusParameter, incorectFloorIDParameter, incorrectApartIDParameter);
        }
    
        public virtual ObjectResult<string> UpdateMaintenanceAssign(Nullable<int> assingmentID, Nullable<int> requestID, Nullable<int> assignedStaff, Nullable<System.DateTime> assingDate, string status)
        {
            var assingmentIDParameter = assingmentID.HasValue ?
                new ObjectParameter("AssingmentID", assingmentID) :
                new ObjectParameter("AssingmentID", typeof(int));
    
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var assignedStaffParameter = assignedStaff.HasValue ?
                new ObjectParameter("AssignedStaff", assignedStaff) :
                new ObjectParameter("AssignedStaff", typeof(int));
    
            var assingDateParameter = assingDate.HasValue ?
                new ObjectParameter("AssingDate", assingDate) :
                new ObjectParameter("AssingDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateMaintenanceAssign", assingmentIDParameter, requestIDParameter, assignedStaffParameter, assingDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> UpdateMaintenanceReq(Nullable<int> requestID, Nullable<int> apartmentID, Nullable<int> floorNum, Nullable<int> tenantID, Nullable<System.DateTime> reqDate, string reqDesc, string status)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var apartmentIDParameter = apartmentID.HasValue ?
                new ObjectParameter("ApartmentID", apartmentID) :
                new ObjectParameter("ApartmentID", typeof(int));
    
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            var reqDateParameter = reqDate.HasValue ?
                new ObjectParameter("ReqDate", reqDate) :
                new ObjectParameter("ReqDate", typeof(System.DateTime));
    
            var reqDescParameter = reqDesc != null ?
                new ObjectParameter("ReqDesc", reqDesc) :
                new ObjectParameter("ReqDesc", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateMaintenanceReq", requestIDParameter, apartmentIDParameter, floorNumParameter, tenantIDParameter, reqDateParameter, reqDescParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> UpdatePayment(Nullable<int> paymentID, Nullable<int> leaseID, Nullable<decimal> paymentAmount, Nullable<System.DateTime> paymentDate, string paymentDesc, Nullable<int> maintenanceID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentDescParameter = paymentDesc != null ?
                new ObjectParameter("PaymentDesc", paymentDesc) :
                new ObjectParameter("PaymentDesc", typeof(string));
    
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("maintenanceID", maintenanceID) :
                new ObjectParameter("maintenanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdatePayment", paymentIDParameter, leaseIDParameter, paymentAmountParameter, paymentDateParameter, paymentDescParameter, maintenanceIDParameter);
        }
    
        public virtual int updateReqStatus(Nullable<int> reqID, string status)
        {
            var reqIDParameter = reqID.HasValue ?
                new ObjectParameter("reqID", reqID) :
                new ObjectParameter("reqID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateReqStatus", reqIDParameter, statusParameter);
        }
    
        public virtual int UpdateRole(Nullable<int> roleID, string roleName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRole", roleIDParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<string> UpdateStaff(Nullable<int> staffID, string firstName, string lastName, string email, string contactNumber, Nullable<int> positionID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateStaff", staffIDParameter, firstNameParameter, lastNameParameter, emailParameter, contactNumberParameter, positionIDParameter);
        }
    
        public virtual ObjectResult<string> UpdateTenant(Nullable<int> tenantID, string firstName, string lastName, string contactNumber, string email, string password)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateTenant", tenantIDParameter, firstNameParameter, lastNameParameter, contactNumberParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> UpdateUser(Nullable<int> userID, string userName, string passwordHash, Nullable<int> roleID, Nullable<int> staffID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateUser", userIDParameter, userNameParameter, passwordHashParameter, roleIDParameter, staffIDParameter);
        }
    
        public virtual ObjectResult<getActiveLease_Result> getActiveLease()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getActiveLease_Result>("getActiveLease");
        }
    
        public virtual ObjectResult<getExpiredLease_Result> getExpiredLease()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getExpiredLease_Result>("getExpiredLease");
        }
    
        public virtual ObjectResult<getMaintenancePayment_Result> getMaintenancePayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMaintenancePayment_Result>("getMaintenancePayment");
        }
    
        public virtual ObjectResult<getPaymentInfo_Result> getPaymentInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaymentInfo_Result>("getPaymentInfo");
        }
    
        public virtual ObjectResult<getTerminatedLease_Result> getTerminatedLease()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTerminatedLease_Result>("getTerminatedLease");
        }
    }
}
